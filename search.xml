<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello</title>
    <url>/2022/02/21/hello/</url>
    <content><![CDATA[<p>关于本站</p>
]]></content>
  </entry>
  <entry>
    <title>Redis部署</title>
    <url>/2022/02/21/redisSentinel/</url>
    <content><![CDATA[<h2 id="一、Redis单机模式部署"><a href="#一、Redis单机模式部署" class="headerlink" title="一、Redis单机模式部署"></a>一、Redis单机模式部署</h2><ol>
<li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf redis-4.0.2.tar.gz</span><br><span class="line"></span><br><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">cd redis-4.0.2</span><br><span class="line"></span><br><span class="line">make MALLOC=libc</span><br><span class="line"></span><br><span class="line">cd src </span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li><h3 id="修改redis-conf文件"><a href="#修改redis-conf文件" class="headerlink" title="修改redis.conf文件"></a>修改<strong>redis.conf文件</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">vi redis.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉 <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改protected-mode 为no</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改daemonize 为yes</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure></li>
<li><h3 id="开机自启动设置"><a href="#开机自启动设置" class="headerlink" title="开机自启动设置"></a>开机自启动设置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/redis</span><br><span class="line"><span class="meta">#</span><span class="bash">复制redis配置文件(启动脚本需要用到配置文件内容,所以要复制)</span></span><br><span class="line">cp  /opt/redis-4.0.2/redis.conf /etc/redis/6379.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">复制redis启动脚本</span></span><br><span class="line">cp  /opt/redis-4.0.2/utils/redis_init_script /etc/init.d/redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改启动脚本参数</span></span><br><span class="line">vi /etc/init.d/redis</span><br><span class="line"><span class="meta">#</span><span class="bash">在/etc/init.d/redis文件的头部添加下面两行注释代码,也就是在文件中<span class="comment">#!/bin/sh的下方添加</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: 2345 10 90</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> description: Start and Stop redis</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">同时还要修改参数,指定redis的安装路径</span></span><br><span class="line">EXEC=/opt/redis-4.0.2/src/redis-server</span><br><span class="line">CLIEXEC=/opt/redis-4.0.2/src/redis-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><h3 id="开机自启动Redis"><a href="#开机自启动Redis" class="headerlink" title="开机自启动Redis"></a>开机自启动Redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开redis命令:</span></span><br><span class="line">service redis start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭redis命令:</span></span><br><span class="line">service redis stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设为开机启动:</span></span><br><span class="line">chkconfig redis on</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设为开机关闭:</span></span><br><span class="line">chkconfig redis off</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Redis部署</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql双主</title>
    <url>/2022/02/21/mysql%E5%8F%8C%E4%B8%BB/</url>
    <content><![CDATA[<h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><p>CentOS 7的yum源中没有正常安装mysql时的mysql-sever文件，需要去官网上下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载mysql源安装包</span></span><br><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装mysql</span></span><br><span class="line">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">yum install mysql-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录修改密码</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;1qaz@WSX&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启远程</span></span><br><span class="line">use mysql;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;1qaz@WSX&#x27; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置默认编码为utf8</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加 [mysqld]</span> </span><br><span class="line">character_set_server=utf8 </span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启/设置开机启动</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line">systemctl enable mysqld </span><br></pre></td></tr></table></figure>

<hr>
<h3 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h3><p>MASTER：192.168.0.202<br>BACKUP：192.168.0.203<br>VIP：192.168.0.204</p>
<h3 id="1、配置两台Mysql主主同步"><a href="#1、配置两台Mysql主主同步" class="headerlink" title="1、配置两台Mysql主主同步"></a>1、配置两台Mysql主主同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master ~]# vi /etc/my.cnf  #开启二进制日志，设置id</span><br><span class="line">[mysqld]</span><br><span class="line">server-id = 1                    #backup这台设置2</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">binlog-ignore-db = mysql,information_schema       #忽略写入binlog日志的库</span><br><span class="line">auto-increment-increment = 2             #字段变化增量值</span><br><span class="line">auto-increment-offset = 1              #MASTER初始字段ID为1,BACKUP初始字段ID为2</span><br><span class="line">slave-skip-errors = all                       #忽略所有复制产生的错误     </span><br><span class="line">[root@master ~]# systemctl restart mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝my.cnf文件到另一台服务器，修改auto-increment-offset = 2</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先查看master <span class="built_in">log</span> bin日志和pos值位置(BACKUP机器为主示例)</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show master status;</span></span><br><span class="line"></span><br><span class="line">[root@ master ~]# mysql -u root -p</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> change master to master_host=<span class="string">&#x27;192.168.0.203&#x27;</span>, master_user=<span class="string">&#x27;root&#x27;</span>, master_password=<span class="string">&#x27;1qaz@WSX&#x27;</span>, master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,master_log_pos=106;</span>  </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明：192.168.0.203是主服务器的id，master_log_file=<span class="string">&#x27; mysql-bin.000002&#x27;</span>是主服务器的File（你主服务器查出来的是什么就写什么），master_log_pos=106是主服务器的Position（你主服务器查出来的是什么就写什么）；每次重新启动主服务器，master_log_file和master_log_pos都会变。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start  slave;         <span class="comment">#启动同步</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> backup配置如下：</span></span><br><span class="line">[root@backup ~]#  mysql -u root -p</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> change master to master_host=<span class="string">&#x27;192.168.0.202&#x27;</span>, master_user=<span class="string">&#x27;root&#x27;</span>, master_password=<span class="string">&#x27;1qaz@WSX&#x27;</span>, master_log_file=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,master_log_pos=106;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start  slave;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主主同步配置完毕，查看同步状态Slave_IO和Slave_SQL是YES说明主主同步成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若 Slave_SQL_Running: no 请重复执行以下内容，直至yes**</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">stop slave;</span> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"><span class="built_in">set</span> GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">start slave;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在master插入数据测试下：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在backup查看是否同步成功：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到已经成功同步过去，同样在backup插入到user表数据，一样同步过去，双主就做成功了。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果主数据库原有数据，从库新建，需要先同步库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要先把主数据库的备份到从库导出主库</span></span><br><span class="line"></span><br><span class="line">mysqldump -uroot -pabc123 --all-databases &gt; /home/20210414-2.sql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入从库</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -pAbc123456. &lt; /home/20210414-2.sql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再重启等待</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2，配置keepalived实现热备"><a href="#2，配置keepalived实现热备" class="headerlink" title="2，配置keepalived实现热备"></a>2，配置keepalived实现热备</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 源码安装（方案1）</span></span><br><span class="line">[root@backup ~]# yum install -y pcre-devel openssl-devel popt-devel #安装依赖包</span><br><span class="line">[root@master ~]# wget http://www.keepalived.org/software/keepalived-1.2.7.tar.gz</span><br><span class="line"></span><br><span class="line">[root@master ~]# tar zxvf keepalived-1.2.7.tar.gz</span><br><span class="line">[root@master ~]# cd keepalived-1.2.7</span><br><span class="line">[root@master ~]#./configure --prefix=/usr/local/keepalived</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum安装（方案2）</span></span><br><span class="line">yum -y install keepalived</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将keepalived配置成系统服务（采用方案2，此处略过）</span></span><br><span class="line">[root@master ~]# cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/init.d/</span><br><span class="line">[root@master ~]# cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br><span class="line">[root@master ~]# mkdir /etc/keepalived/</span><br><span class="line">[root@master ~]# cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class="line">[root@master ~]# cp /usr/local/keepalived/sbin/keepalived /usr/sbin/</span><br><span class="line"></span><br><span class="line">[root@master ~]# vi /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File forkeepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">        ops@wangshibo.cn</span><br><span class="line">        tech@wangshibo.cn</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    notification_email_from ops@wangshibo.cn</span><br><span class="line">    smtp_server 127.0.0.1 </span><br><span class="line">    smtp_connect_timeout 30</span><br><span class="line">    router_id MASTER-HA</span><br><span class="line">&#125;</span><br><span class="line">       </span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"> state BACKUP           #主从均写成BACKUP</span><br><span class="line"> interface eth0  #本地服务器网卡</span><br><span class="line"> virtual_router_id 51       #主备相同</span><br><span class="line"> priority 150           #优先级，backup设置90</span><br><span class="line"> advert_int 1           #心跳检测</span><br><span class="line"> nopreempt             #不主动抢占资源，只在优先级高的设置</span><br><span class="line"> authentication &#123;</span><br><span class="line"> auth_type PASS</span><br><span class="line"> auth_pass 1111</span><br><span class="line"> &#125;</span><br><span class="line"> virtual_ipaddress &#123;</span><br><span class="line"> 192.168.0.204</span><br><span class="line"> &#125;</span><br><span class="line"> track_script &#123;               </span><br><span class="line"> chk_mysql_port             </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_mysql_port &#123;     #检测mysql服务是否在运行。有很多方式，比如进程，用脚本检测等等</span><br><span class="line">    script &quot;/etc/keepalived/chk_mysql.sh&quot;   #这里通过脚本监测</span><br><span class="line">    interval 2                   #脚本执行间隔，每2s检测一次</span><br><span class="line">    weight -5                    #脚本结果导致的优先级变更，检测失败（脚本返回非0）则优先级 -5</span><br><span class="line">    fall 2                    #检测连续2次失败才算确定是真失败。会用weight减少优先级（1-255之间）</span><br><span class="line">    rise 1                    #检测1次成功就算成功。但不修改优先级</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@master ~]# vi /etc/keepalived/chk_mysql.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">counter=$(netstat -na|grep &quot;LISTEN&quot;|grep &quot;3306&quot;|wc -l)</span><br><span class="line">if [ &quot;$&#123;counter&#125;&quot; -eq 0 ]; then</span><br><span class="line">    systemctl stop keepalived</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[root@master ~]# chmod +x /etc/keepalived/chk_mysql.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动（方案1）</span></span><br><span class="line">[root@master ~]# /etc/init.d/keepalived start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动（方案2）</span></span><br><span class="line">[root@master ~]# systemctl enable keepalived</span><br><span class="line">[root@master ~]# systemctl start keepalived</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行状况</span></span><br><span class="line">systemctl status keepalived</span><br><span class="line"></span><br><span class="line">查看虚拟IP</span><br><span class="line">[root@master ~]# ip addr show	</span><br></pre></td></tr></table></figure>

<h3 id="3，注意事项"><a href="#3，注意事项" class="headerlink" title="3，注意事项"></a>3，注意事项</h3><p>state BACKUP/MASTER  （主备身份）<br>priority   （权限级别）<br>nopreempt  （非抢占模式）</p>
<p>这三个参数非常重要，由于数据同步是需要时间的，因此，在死机的服务器启动的瞬间，如果把主身份抢走的话，会造成短时间的数据不一致，导致系统错误，因此，需要设置成死机的机器启动成功后也不要抢占主身份。</p>
<p>这里有多种设置：<br>1，可以设置 主备身份之后，把主设置为非抢占模式；<br>2，也可以 把两台服务器都设置成备身份，然后都设置成非抢占模式，权限级别设置成一样。<br>3，还可以都设置成备身份，然后其中一台权限级别设置比另外一个高，然后把高的设置为非抢占模式。</p>
<p>授权两台Mysql服务器允许root远程登录，用于在其他服务器登陆测试！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all on *.* to<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.0.%&#x27;</span> identified by <span class="string">&#x27;123.com&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4，测试高可用性"><a href="#4，测试高可用性" class="headerlink" title="4，测试高可用性"></a>4，测试高可用性</h3><p>1、通过Mysql客户端通过VIP连接，看是否连接成功。<br>2、停止master这台mysql服务，是否能正常切换过去，可通过ip addr命令来查看VIP在哪台服务器上。<br>3、可通过查看/var/log/messges日志，看出主备切换过程<br>4、master服务器故障恢复后，是否主动抢占资源，成为活动服务器。</p>
<h3 id="5，测试用例："><a href="#5，测试用例：" class="headerlink" title="5，测试用例："></a>5，测试用例：</h3><p>一，简单用例：<br>1，停止master上的mysql服务，查看数据库是否能正常使用；恢复master上的mysql，查看数据是否同步。<br>2，停止slave上的mysql服务，查看数据库是否能正常使用；恢复slave上的mysql，查看数据是否同步。<br>3，关闭master服务器，查看数据库是否能正常使用；打开master服务器，查看数据是否正常同步。<br>4，关闭slave服务器，查看数据库是否能正常使用；打开slave服务器，查看数据是否正常同步。<br>5，关闭master服务器上的网络服务，查看数据库是否能正常使用；打开master网络服务，查看数据库是否正常同步。<br>6，关比slave服务器上的网络服务，查看数据库是否能正常使用；打开slave网络服务，查看数据库是否正常同步。</p>
<p>二，复杂用例：<br>1，关闭master服务器，再打开master服务器，说明数据库跳到slave机器上；打开master服务器之后，查看数据库连接是否重新跳回master。<br>2，如果不跳回master，同样的操作对slave做一遍</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka集群部署</title>
    <url>/2022/02/21/Kafka%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><h3 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a><strong>一、前提条件</strong></h3><p>1、部署Kafka集群搭建需要服务器至少3台，奇数台</p>
<p>2、Kafka的安装需要java环境，jdk1.8</p>
<p>3、Kafka安装包版本：<a href="https://mirror-hk.koddos.net/apache/kafka/2.7.0/kafka_2.13-2.7.0.tgz">https://mirror-hk.koddos.net/apache/kafka/2.7.0/kafka_2.13-2.7.0.tgz</a></p>
<p>4、3台机器增加host配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.202.129 kafka-1.local</span><br><span class="line">192.168.202.130 kafka-2.local</span><br><span class="line">192.168.202.131 kafka-3.local</span><br></pre></td></tr></table></figure>

<h3 id="二、Zookeeper集群搭建"><a href="#二、Zookeeper集群搭建" class="headerlink" title="二、Zookeeper集群搭建"></a><strong>二、Zookeeper集群搭建</strong></h3><p>直接使用kafka自带的zookeeper建立zk集群</p>
<p>1、将安装包 kafka_2.13-2.7.0.tgz 上传到/opt 目录下</p>
<p>2、解压：tar -zxvf kafka_2.13-2.7.0.tgz</p>
<p>3、进入目录：cd /opt/kafka_2.13-2.7.0/</p>
<p>4、创建zookeeper目录：mkdir zk_kfk_data</p>
<p>5、进入目录：cd /opt/kafka_2.13-2.7.0/config</p>
<p>6、修改zookeeper.properties文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/opt/kafka_2.13-2.7.0/zk_kfk_data</span><br><span class="line"> </span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line"> </span><br><span class="line">server.1=kafka-1.local:2888:3888</span><br><span class="line">server.2=kafka-2.local:2888:3888</span><br><span class="line">server.3=kafka-3.local:2888:3888</span><br></pre></td></tr></table></figure>

<p>三台机器上的zookeeper.properties文件配置相同，dataDir 为zk的数据目录，server.1、server.2、server.3 为集群信息。</p>
<p>2888端口号是zookeeper服务之间通信的端口</p>
<p>3888端口是zookeeper与其他应用程序通信的端口。</p>
<p><strong>tickTime：CS通信心跳数</strong></p>
<p>Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</p>
<pre><code>  tickTime以毫秒为单位。

  tickTime：该参数用来定义心跳的间隔时间，zookeeper的客户端和服务端之间也有和web开发里类似的session的概念，而zookeeper里最小的session过期时间就是tickTime的两倍。
</code></pre>
<p><strong>initLimit：LF初始通信时限</strong></p>
<p>集群中的follower服务器(F)与leader服务器(L)之间 初始连接 时能容忍的最多心跳数（tickTime的数量）</p>
<p><strong>syncLimit：LF同步通信时限</strong></p>
<p>集群中的follower服务器(F)与leader服务器(L)之间 请求和应答 之间能容忍的最多心跳数（tickTime的数量）</p>
<p>7、创建myid文件：进入/opt/kafka_2.13-2.7.0/zk_kfk_data目录，创建myid文件，将三台服务器上的myid文件分别写入1，2，3。myid是zookeeper集群用来发现彼此的标识，必须创建，且不能相同。</p>
<p>8、执行启动zookeeper命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup /opt/kafka_2.13-2.7.0/bin/zookeeper-server-start.sh /opt/kafka_2.13-2.7.0/config/zookeeper.properties &gt; /opt/kafka_2.13-2.7.0/zookeeper.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>三台机器都执行启动命令，查看zookeeper的日志文件，没有报错就说明zookeeper集群启动成功了。</strong></p>
</blockquote>
<h3 id="三、Kafka集群搭建"><a href="#三、Kafka集群搭建" class="headerlink" title="三、Kafka集群搭建"></a><strong>三、Kafka集群搭建</strong></h3><p>1、进入目录：cd /opt/kafka_2.13-2.7.0/<br>2、创建kafka日志数据目录：mkdir kafka-logs-1<br>3、进入目录：cd /opt/kafka_2.13-2.7.0/config<br>4、修改server.properties配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//用于区分broker,必须唯一,每台机器只需要一个broker.id</span><br><span class="line">//机器A</span><br><span class="line">broker.id=0</span><br><span class="line">//机器B</span><br><span class="line">broker.id=1</span><br><span class="line">//机器C</span><br><span class="line">broker.id=2</span><br><span class="line"> </span><br><span class="line">//PLAINTEXT表示协议,配置本机IP地址</span><br><span class="line">listeners=PLAINTEXT://kafka-1.local:9092</span><br><span class="line">//PLAINTEXT表示协议,配置本机IP地址,对外公布</span><br><span class="line">advertised.listeners=PLAINTEXT://kafka-1.local:9092</span><br><span class="line">//配置zookeeper的地址,zookeeper集群地址以逗号隔开</span><br><span class="line">zookeeper.connect=kafka-1.local:2181,kafka-2.local:2181,kafka-3.local:2181</span><br><span class="line">//配置数据存放目录</span><br><span class="line">log.dirs=/opt/kafka_2.13-2.7.0/kafka-logs-1</span><br><span class="line"># 消息大小5M</span><br><span class="line">max.request.size=5242880</span><br></pre></td></tr></table></figure>

<p>5、配置其他2台机器，注意服务器地址修改</p>
<p>6、 启动kafka集群：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup /opt/kafka_2.13-2.7.0/bin/kafka-server-start.sh /opt/kafka_2.13-2.7.0/config/server.properties &gt; /opt/kafka_2.13-2.7.0/kafka.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>三个节点均要启动；启动无报错，即搭建成功，注意：配置的时候尽量使用绑定的host，而不是直接IP</strong></p>
</blockquote>
<p>7、停止kafka集群：/opt/kafka_2.13-2.7.0/bin/kafka-server-stop.sh</p>
<h3 id="四、测试Kafka集群"><a href="#四、测试Kafka集群" class="headerlink" title="四、测试Kafka集群"></a><strong>四、测试Kafka集群</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建topic,--replication-factor指定副本个数,--partitions指定分区个数</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-topics.sh --create --zookeeper kafka-1.local:2181 --replication-factor 2 --partitions 1 --topic test</span><br><span class="line"> </span><br><span class="line">//查看所有的topic信息</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-topics.sh --list --zookeeper kafka-1.local:2181</span><br><span class="line"> </span><br><span class="line">//启动生产者</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-console-producer.sh --broker-list kafka-1.local:9092,kafka-2.local:9092,kafka-3.local:9092 --topic test</span><br><span class="line">&gt; hello world 1</span><br><span class="line">&gt; hello world 2</span><br><span class="line">&gt; hello world 3</span><br><span class="line"> </span><br><span class="line">//启动消费者</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-console-consumer.sh --bootstrap-server kafka-1.local:9092,kafka-2.local:9092,kafka-3.local:9092 --topic test --from-beginning</span><br><span class="line"> </span><br><span class="line">//删除topic</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-topics.sh --delete --zookeeper kafka-1.local:2181 --topic test</span><br></pre></td></tr></table></figure>

<h2 id="安全认证与授权"><a href="#安全认证与授权" class="headerlink" title="安全认证与授权"></a>安全认证与授权</h2><h3 id="一、认证范围"><a href="#一、认证范围" class="headerlink" title="一、认证范围"></a><strong>一、认证范围</strong></h3><p>Kafka的认证范围包含如下：</p>
<ul>
<li>Client与Broker之间</li>
<li>Broker与Broker之间</li>
<li>Broker与Zookeeper之间</li>
</ul>
<p>当前Kafka系统支持多种认证机制，包括SSL、SASL（Kerberos、PLAIN、SCRAM）。</p>
<h3 id="二、SCRAM认证"><a href="#二、SCRAM认证" class="headerlink" title="二、SCRAM认证"></a>二、SCRAM认证</h3><p>PLAIN认证有个问题，就是不能动态新增用户，每次添加用户后，需要重启正在运行的Kafka集群才能生效。为此，在生产环境，这种认证方式不符合实际业务场景。而SCRAM不一样，使用SCRAM认证，可以动态新增用户，添加用户后，可以不用重启正在运行的Kafka集群即可进行鉴权。</p>
<p>1、在/opt/kafka_2.13-2.7.0/config目录中，复制server.properties文件并重命名为scram.properties，接着修改服务端配置文件scram.properties，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置监听使用SASL而不是SSL</span><br><span class="line">listeners=SASL_PLAINTEXT://kafka-1.local:9092</span><br><span class="line">advertised.listeners=SASL_PLAINTEXT://kafka-1.local:9092</span><br><span class="line"></span><br><span class="line"># 表示开启SCRAM认证机制，并启用SHA-256算法</span><br><span class="line">sasl.enabled.mechanisms=SCRAM-SHA-256</span><br><span class="line"># 表示Broker间通信也要开启SCRAM认证，同样适用SHA-256算法</span><br><span class="line">sasl.mechanism.inter.broker.protocol=SCRAM-SHA-256</span><br><span class="line"># 表示Broker间通信使用SASL</span><br><span class="line">security.inter.broker.protocol=SASL_PLAINTEXT</span><br><span class="line"># 设置身份验证使用的类</span><br><span class="line">authorizer.class.name=kafka.security.authorizer.AclAuthorizer</span><br><span class="line">super.users=User:admin</span><br><span class="line"></span><br><span class="line"># 对所有用户topic可见，要禁用。</span><br><span class="line">allow.everyone.if.no.acl.found=false</span><br></pre></td></tr></table></figure>

<p>2、Zookeeper 中创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加admin用户</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-configs.sh --zookeeper localhost:2191 --alter --add-config &#x27;SCRAM-SHA-256=[password=1qaz2wsx],SCRAM-SHA-512=[password=1qaz2wsx]&#x27; --entity-type users --entity-name admin</span><br><span class="line"># 添加sys用户</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-configs.sh --zookeeper localhost:2191 --alter --add-config &#x27;SCRAM-SHA-256=[iterations=8192,password=1qaz2wsx],SCRAM-SHA-512=[password=1qaz2wsx]&#x27; --entity-type users --entity-name sys</span><br></pre></td></tr></table></figure>

<p>查看所有用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-configs.sh --zookeeper localhost:2191 --describe --entity-type users</span><br></pre></td></tr></table></figure>

<p>3、启动Kafka集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#config目录下，新建kafka_server_jaas.conf文件，内容如下</span><br><span class="line">KafkaServer &#123;</span><br><span class="line">org.apache.kafka.common.security.scram.ScramLoginModule required</span><br><span class="line">username=&quot;admin&quot;</span><br><span class="line">password=&quot;1qaz2wsx&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">#bin目录下，新建kafka-scram-start.sh文件，添加内容如下</span><br><span class="line">if [ &quot;x$KAFKA_OPTS&quot; ]; then</span><br><span class="line">export KAFKA_OPTS=&quot;-Djava.security.auth.login.config=/opt/kafka_2.13-2.7.0/config/kafka_server_jaas.conf&quot;</span><br><span class="line">fi</span><br><span class="line">#启动kafka服务端</span><br><span class="line">nohup /opt/kafka_2.13-2.7.0/bin/kafka-scram-start.sh /opt/kafka_2.13-2.7.0/config/scram.properties &gt; /opt/kafka_2.13-2.7.0/kafka.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>4、配置用户的ACL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#列出所有主题的ACL设置</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2191 --list</span><br><span class="line"># 允许 sys 用户读取和写入test主题</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-acls.sh --authorizer-properties zookeeper.connect=localhost:2191 --add --allow-principal User:sys --operation Read --operation Write --topic test</span><br><span class="line"></span><br><span class="line">#往test主题中发送测试数据</span><br><span class="line">(1)producer.properties 文件加入以下属性</span><br><span class="line">security.protocol=SASL_PLAINTEXT</span><br><span class="line">sasl.mechanism=SCRAM-SHA-256</span><br><span class="line">sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username=&quot;sys&quot; password=&quot;1qaz2wsx&quot;;</span><br><span class="line">(2)运行生产程序</span><br><span class="line">/opt/kafka_2.13-2.7.0/bin/kafka-console-producer.sh --broker-list 192.168.144.101:9092 --topic test --producer.config  /opt/kafka_2.13-2.7.0/config/producer.properties</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
</search>
